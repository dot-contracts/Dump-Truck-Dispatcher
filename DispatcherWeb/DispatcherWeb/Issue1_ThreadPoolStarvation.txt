ISSUE 1: THREAD POOL STARVATION

SYMPTOMS:
The DispatcherWeb application was experiencing periodic hangs where the application would become completely unresponsive for extended periods. During these hang episodes, the application showed very low CPU utilization (less than 10%) and moderate memory usage (around 30%), despite running on three P3V3 Azure App Service instances. Application traces revealed that 99+% of the time was spent in "wait" states, indicating that threads were blocked and unable to process requests. The application would eventually recover after several minutes, but this created significant user experience issues and business impact.

ROOT CAUSE ANALYSIS:
Thread pool starvation occurs when the .NET thread pool exhausts all available worker threads, causing incoming requests to queue up in the thread pool queue. When this happens, new requests cannot be processed because there are no available threads to handle them, making the application appear completely hung. This is particularly problematic in ASP.NET applications that rely heavily on the thread pool for request processing. The issue was exacerbated by the ABP framework's asynchronous patterns and the application's multi-tenant architecture, which could create scenarios where multiple concurrent operations would consume all available threads.

SOLUTION IMPLEMENTED:
1. ThreadPoolMonitoringService: Created a dedicated background service that continuously monitors thread pool health every 30 seconds. The service tracks both worker thread and completion port thread utilization, calculating utilization percentages and providing real-time alerts when thresholds are exceeded.

2. Thread Pool Configuration: Optimized the thread pool settings in Startup.cs by setting minimum threads to 2x processor count and maximum threads to 4x processor count. This ensures adequate thread availability while preventing excessive thread creation.

3. Enhanced Request Monitoring: Implemented EnhancedPerformanceMonitoringMiddleware that captures thread pool state at the start and end of each HTTP request, providing context for when thread pool starvation occurs during request processing.

4. Comprehensive Alerting: Set up Application Insights alerts for thread pool utilization exceeding 80% (warning) and 90% (critical), enabling proactive detection of thread pool issues.

TECHNICAL DETAILS:
- The ThreadPoolMonitoringService runs as a BackgroundService with a 30-second monitoring interval
- Thread pool metrics include: WorkerThreadUtilization, CompletionPortUtilization, AvailableWorkerThreads, MaxWorkerThreads
- Alerts are triggered when utilization exceeds 80% (warning) or 90% (critical)
- The service logs detailed information when utilization is high to aid in debugging
- Thread pool configuration: MinThreads = ProcessorCount * 2, MaxThreads = ProcessorCount * 4

IMPACT AND BENEFITS:
1. Proactive Detection: The monitoring service provides early warning of thread pool issues before they cause complete application hangs
2. Real-time Visibility: Continuous monitoring allows for immediate identification of thread pool bottlenecks
3. Historical Analysis: Detailed metrics enable trend analysis to identify patterns in thread pool utilization
4. Reduced Downtime: Early detection and alerting minimize the duration and frequency of application hangs
5. Better Resource Utilization: Optimized thread pool configuration ensures efficient use of available threads
6. Improved User Experience: Reduced hang frequency and duration leads to better application responsiveness

MONITORING METRICS:
- ThreadPool_WorkerThreadUtilization: Percentage of worker threads in use
- ThreadPool_CompletionPortUtilization: Percentage of completion port threads in use
- ThreadPool_AvailableWorkerThreads: Number of available worker threads
- ThreadPool_AvailableCompletionPortThreads: Number of available completion port threads
- ThreadPool_MaxWorkerThreads: Maximum number of worker threads
- ThreadPool_MaxCompletionPortThreads: Maximum number of completion port threads

ALERT CONDITIONS:
- Warning: Worker thread utilization > 80% OR completion port utilization > 80%
- Critical: Worker thread utilization > 90% OR completion port utilization > 90%
- Events: ThreadPool_HighUtilization_Alert, ThreadPool_Exhaustion_Alert

This solution addresses the primary root cause of the application hangs by providing comprehensive monitoring and optimized thread pool management, ensuring the application can handle concurrent requests more effectively and recover quickly from thread pool pressure. 